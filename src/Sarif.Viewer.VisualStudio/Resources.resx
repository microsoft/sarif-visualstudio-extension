<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CompletedProcessingLogFileFormat" xml:space="preserve">
    <value>Done processing SARIF log '{0}' is complete.</value>
    <comment>Used to display processing log file information in VS's task center UI.</comment>
  </data>
  <data name="ConfirmDownloadDialog_CheckboxLabel" xml:space="preserve">
    <value>Always allow downloads from '{0}'</value>
  </data>
  <data name="ConfirmDownloadDialog_Message" xml:space="preserve">
    <value>Do you want to download the source file from this location?

{0}</value>
  </data>
  <data name="ConfirmDownloadDialog_Title" xml:space="preserve">
    <value>Confirm Download</value>
  </data>
  <data name="ContinuingCallTreeNodeMessage" xml:space="preserve">
    <value>Continuing</value>
  </data>
  <data name="ConvertNonSarifLog_DialogMessage" xml:space="preserve">
    <value>The log file you have opened will be converted to SARIF. Would you like to save the converted file?</value>
  </data>
  <data name="DownloadFail_DialogMessage" xml:space="preserve">
    <value>An error occurred downloading the source file.</value>
  </data>
  <data name="ErrorListTableDataSourceDisplayName" xml:space="preserve">
    <value>SARIF Viewer</value>
  </data>
  <data name="FileOpenFail_DialogCaption" xml:space="preserve">
    <value>Open File</value>
  </data>
  <data name="FileOpenFail_DialogMessage" xml:space="preserve">
    <value>The file '{0}' couldn't be opened by Visual Studio. Would you like to open the containing folder?</value>
    <comment>{0} will be the name of the file that couldn't be opened</comment>
  </data>
  <data name="FixPreviewWindow_OriginalFileTitle" xml:space="preserve">
    <value>Original</value>
  </data>
  <data name="FixPreviewWindow_PreviewFixedFileTitle" xml:space="preserve">
    <value>Fix Preview</value>
  </data>
  <data name="LogOpenFail_InvalidFormat_DialogMessage" xml:space="preserve">
    <value>The log file '{0}' is invalid and couldn't be opened.</value>
    <comment>{0} will be the name of the invalid file that couldn't be opened</comment>
  </data>
  <data name="NoResults_DialogMessage" xml:space="preserve">
    <value>SARIF Explorer found no results in analysis log '{0}'.</value>
    <comment>{0} will be the name of the file that was opened</comment>
  </data>
  <data name="OpenLogFileFail_DilogMessage" xml:space="preserve">
    <value>The log file '{0}' was not found.</value>
    <comment>{0} will be the full file path</comment>
  </data>
  <data name="ProcessingLogFileFormat" xml:space="preserve">
    <value>Processing SARIF log '{0}'…</value>
    <comment>Used to display processing log file information in VS's task center UI.</comment>
  </data>
  <data name="ProcessLogFiles" xml:space="preserve">
    <value>Processing SARIF logs…</value>
    <comment>Used to display processing log file information in VS's task center UI.</comment>
  </data>
  <data name="ProcessLogFilesComplete" xml:space="preserve">
    <value>Completed processing SARIF logs.</value>
    <comment>Used to display processing log file information in VS's task center UI.</comment>
  </data>
  <data name="ReturnMessage" xml:space="preserve">
    <value>Return</value>
    <comment>Displayed on a call tree "CallReturn" node</comment>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="RuleLookup" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Data\RuleLookup.json;System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="SarifExplorerCaption" xml:space="preserve">
    <value>SARIF Explorer</value>
    <comment>The caption of the SARIF explorer tool window</comment>
  </data>
  <data name="SaveConvertedLog_DialogTitle" xml:space="preserve">
    <value>Save Converted Log File</value>
  </data>
  <data name="SaveDialogFileFilter" xml:space="preserve">
    <value>SARIF log files (*.sarif)|*.sarif</value>
  </data>
  <data name="SaveLogFail_Access_DialogMessage" xml:space="preserve">
    <value>The log file couldn't be saved because access to the path '{0}' was denied.</value>
    <comment>{0} will be the full file path</comment>
  </data>
  <data name="SaveLogFail_General_Dialog" xml:space="preserve">
    <value>The log file couldn't be saved: {0}</value>
    <comment>{0} will be the exception message</comment>
  </data>
  <data name="SaveTransformedPrereleaseV2Log_DialogTitle" xml:space="preserve">
    <value>Save Transformed Log File</value>
  </data>
  <data name="SaveTransformedV1Log_DialogTitle" xml:space="preserve">
    <value>Save Transformed Log File</value>
  </data>
  <data name="TransformPrereleaseV2_DialogMessage" xml:space="preserve">
    <value>The log file you have opened conforms to a pre-release SARIF version 2 schema. This file will be automatically transformed to SARIF version {0}. Would you like to save the transformed file?</value>
    <comment>{0} will be the referenced SARIF schema version, e.g. 2.1.0</comment>
  </data>
  <data name="TransformV1_DialogMessage" xml:space="preserve">
    <value>The log file you have opened is SARIF version 1. This file will be automatically transformed to SARIF version 2. Would you like to save the transformed file?</value>
  </data>
  <data name="UnknownCalleeMessage" xml:space="preserve">
    <value>&lt;unknown callee&gt;</value>
    <comment>Displayed on a call tree "Call" node with no callee</comment>
  </data>
  <data name="UnknownToolName" xml:space="preserve">
    <value>Unknown</value>
  </data>
  <data name="VersionPropertyNotFound_DialogTitle" xml:space="preserve">
    <value>The SARIF specification recommends that the version property appear at the beginning of the log file. This log file does not conform to that recommendation.</value>
  </data>
  <data name="ImportPREfastFilter" xml:space="preserve">
    <value>PREfast log files (*.xml)|*.xml</value>
    <comment>Used in the import log open dialog</comment>
  </data>
  <data name="ImportStaticDriverVerifierFilter" xml:space="preserve">
    <value>Static Driver Verifier log files (*.tt)|*.tt</value>
    <comment>Used in the import log open dialog</comment>
  </data>
  <data name="ImportFxCopFilter" xml:space="preserve">
    <value>FxCop report and project files (*.xml)|*.xml</value>
    <comment>Used in the import log open dialog</comment>
  </data>
  <data name="ImportFortifyFilter" xml:space="preserve">
    <value>Fortify log files (*.xml)|*.xml</value>
    <comment>Used in the import log open dialog</comment>
  </data>
  <data name="ImportFortifyFprFilter" xml:space="preserve">
    <value>Fortify FPR log files (*.fpr)|*.fpr</value>
    <comment>Used in the import log open dialog</comment>
  </data>
  <data name="ImportCppCheckFilter" xml:space="preserve">
    <value>CppCheck log files (*.xml)|*.xml</value>
    <comment>Used in the import log open dialog</comment>
  </data>
  <data name="ImportClangAnalyzerFilter" xml:space="preserve">
    <value>Clang log files (*.xml)|*.xml</value>
    <comment>Used in the import log open dialog</comment>
  </data>
  <data name="ImportAndroidStudioFilter" xml:space="preserve">
    <value>Android Studio log files (*.xml)|*.xml</value>
    <comment>Used in the import log open dialog</comment>
  </data>
  <data name="ImportPylintFilter" xml:space="preserve">
    <value>Pylint log files (*.json)|*.json</value>
    <comment>Used in the import log open dialog</comment>
  </data>
  <data name="ImportTSLintFilter" xml:space="preserve">
    <value>TSLint log files (*.json)|*.json</value>
    <comment>Used in the import log open dialog</comment>
  </data>
  <data name="ImportContrastSecurityFilter" xml:space="preserve">
    <value>Contrast Security files (*.xml)|*.xml</value>
    <comment>Used in the import log open dialog</comment>
  </data>
  <data name="ImportLogOpenFileDialogTitle" xml:space="preserve">
    <value>Import analysis log</value>
    <comment>Used in the import log open dialog</comment>
  </data>
  <data name="ImportMSBuildFilter" xml:space="preserve">
    <value>MSBuild files (*.*)|*.*</value>
    <comment>Used in the import log open dialog</comment>
  </data>
  <data name="ImportSemmleQLFilter" xml:space="preserve">
    <value>Semmle QL log files (*.csv)|*.csv</value>
    <comment>Used in the import log open dialog</comment>
  </data>
  <data name="ImportNoneFilter" xml:space="preserve">
    <value>SARIF files (*.sarif)|*.sarif</value>
    <comment>Used in the import log open dialog. The (None) tool format is expected to be SARIF in the logic.</comment>
  </data>
</root>