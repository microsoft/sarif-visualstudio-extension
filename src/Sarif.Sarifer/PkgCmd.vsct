<?xml version="1.0" encoding="utf-8"?>

<!--
Copyright (c) Microsoft. All rights reserved.
 Licensed under the MIT license. See LICENSE file in the project root for full license information.
-->

<CommandTable xmlns="http://schemas.microsoft.com/VisualStudio/2005-10-18/CommandTable" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <!-- 
  This is the file that defines the actual layout and type of the commands.
  It is divided in different sections (e.g. command definition, command
  placement, ...), with each defining a specific set of properties.
  See the comment before each section or the VSCT schema for more details
  about how to use it.
  -->

  <!--
  The VSCT compiler (the tool that translates this file into the binary format
  that VisualStudio will consume) has the ability to import external files with
  definition of constants that can be used inside the definition of your command.
  The way to include these files is to add an "Extern" tag to your VSCT file and
  specify the name of the file to reference inside the href attribute.
  Using this ability of the compiler here, we include some files defining some
  of the constants that we will use inside the file.
  -->

  <!--This is the file that defines the IDs for all the commands exposed by VisualStudio.-->
  <Extern href="stdidcmd.h" />

  <!--This header contains the command ids for the menus provided by the shell.-->
  <Extern href="vsshlids.h"/>

  <!--This header contains the image monikers for various images-->
  <Include href="KnownImageIds.vsct"/>

  <!--This header contains data for a custom image moniker-->
  <!--
  NOTE: The custom moniker data does not have to be defined in a separate file, it can also
  be defined in this .vsct file.
  -->
  <Include href="CustomMoniker.vsct"/>
  
  <!--
  The first section of this file is the Commands section. This is where we define
  the commands, menus and menu groups. This section uses a Guid to identify the
  package that provides the command defined inside it.
  Note that the package's GUID is expressed as a symbol that the compiler will
  translate in an actual GUID at compile time. It is not allow to use an actual
  GUID for the package attribute.
  -->
  <Commands package="guidMenuAndCommandsPkg">
    <!--
    Inside this section we can have different sub-sections: one for the menus, another
    for the menu groups, one for the buttons (the actual commands), one for the combos
    and the last one for the bitmaps used. Each element is identified by a command id that
    is a unique pair of guid and numeric identifier; the guid part of the identifier is usually
    called "command set" and is used to group different command inside a logically related
    group; your package should define its own command set in order to avoid collisions
    with command ids defined by other packages.
    In the VSCT syntax you have to specify this unique identifier using two required attributes:
    the guid attribute for the command set and the id attribute for the numeric part.
    -->

    <!--
    In this section we define new menu groups. A group is a container for menus or buttons (commands);
    from a visual point of view you can see the group as the part of a menu contained between separators.
    The parent of a group must be a menu/toolbar.
    -->
    <Groups>
      <!--
      To define a group we have to specify its ID, the parent and its display priority.
      In this case we use as our parent menu the Tools menu of VS; its ID is defined in vsshlids.h.
      -->
      <Group guid="guidMenuAndCommandsCmdSet" id="MyMenuGroup" priority="0x600">
        <Parent guid="guidSHLMainMenu" id="IDM_VS_MENU_TOOLS"/>
      </Group>
    </Groups>

    <!--
    This section defines the elements the user can interact with, like a menu command or a button
    or combo box.
    -->
    <Buttons>
      <!--
      An element inside this section is defined by its ID and must specify a parent group, a display
      priority, an image, a type, some visibility flags (optional) and a default text.
      -->
      <Button guid="guidMenuAndCommandsCmdSet" id="cmdidMyCommand" priority="0x100" type="Button">
        <Parent guid="guidMenuAndCommandsCmdSet" id="MyMenuGroup"/>
        <Icon guid="ImageCatalogGuid" id="GoToNext"/>
        <CommandFlag>IconIsMoniker</CommandFlag>
        <Strings>
          <ButtonText>C# Command Sample</ButtonText>
        </Strings>
      </Button>

    </Buttons>
  </Commands>

  <!--
  In this example we have always used descriptive names for the GUIDs and numeric IDs inside the definition
  of the elements. The VSCT compiler actually enforces the usage of these names instead of hard-coding
  the numbers in the definitions.

  We have also seen that the compiler can read some of these constants from the files imported with the
  "Extern" tag at the beginning of the file. The problem is then how to define the other constants.

  The "Symbols" section is where this association between descriptive names and actual values happen.
  -->
  <Symbols>
    <!--
    The definition of symbols in a VSCT file derives from the way the IDs of the elements are defined
    by the command table. We have seen that the ID is a GUID/Number pair, where the GUID is also called
    Command Set and it provides the context in which the numeric ID is evaluated.

    It makes then sense for the VSCT schema to define the GuidSymbl tag as top level element containig
    the definiton of the numeric IDs.
    -->

    <!--The first GUID defined here is the one for the package. It does not contains numeric IDs.-->
    <GuidSymbol name="guidMenuAndCommandsPkg" value="{F70132AB-4095-477F-AAD2-81D3D581113B}" />
    
    
    <!--The GUID for the command set is the one that contains the numeric IDs used in this sample
        with the only exception of the one used for the bitmap.-->
    <GuidSymbol name="guidMenuAndCommandsCmdSet" value="{CD8EE607-A630-4652-B2BA-748F534235C1}">
      <IDSymbol name="MyMenuGroup" value="0x1010" />
      <IDSymbol name="cmdidMyCommand" value="0x2001" />
    </GuidSymbol>

  </Symbols>
</CommandTable>
